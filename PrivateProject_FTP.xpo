Exportfile for AOT version 1.0 or later
Formatversion: 1

***Element: CLS

; Microsoft Dynamics AX Class: FTPReceiver descarregado
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #FTPReceiver
    Id 34459
    PROPERTIES
      Name                #FTPReceiver
      Extends             #
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//<I9_ADC022>
        #class FTPReceiver
        #{
        #    List                                    downloadedProtocolfilesList;
        #    List                                    files;
        #    ListEnumerator                          listEnum;
        #
        #    str                                     ftpAddress, user, pwd, fileAux;
        #    str                                     dirIntegrationPath;
        #    Boolean                                 validated;
        #
        #    object                                  ftpo;
        #    object                                  ftpResponse;
        #    System.Net.FtpWebResponse               response;
        #    System.Net.FtpWebRequest                request;
        #    System.IO.StreamReader                  reader;
        #    System.IO.StreamWriter                  writer;
        #    System.IO.Stream                        requestStream;
        #    System.Byte[]                           bytes;
        #    System.Net.NetworkCredential            credential;
        #    System.String                           xmlContent, line;
        #    System.Text.Encoding                    utf8;
        #    System.Exception                        exception;
        #}
      ENDSOURCE
      SOURCE #createDownloadRequest
        #private void createDownloadRequest()
        #{;
        #    ftpo = System.Net.WebRequest::Create(@"ftp://" + ftpaddress+ @"/" +fileAux);
        #    request = ftpo;
        #}
      ENDSOURCE
      SOURCE #createListRequest
        #private void createListRequest()
        #{;
        #    ftpo = System.Net.WebRequest::Create(@"ftp://" +ftpAddress);
        #    request = ftpo;
        #}
      ENDSOURCE
      SOURCE #downloadFiles
        #private void downloadFiles()
        #{
        #    str filePath;
        #    ;
        #
        #    listEnum = files.getEnumerator();
        #    listEnum.reset();
        #    while(listEnum.moveNext())
        #    {
        #        fileAux = listEnum.current();
        #
        #        this.createDownloadRequest();
        #        this.setCredentials();
        #
        #        request.set_Method("RETR");
        #        response = request.GetResponse();
        #
        #        reader = new System.IO.StreamReader(response.GetResponseStream());
        #        line = reader.ReadToEnd();
        #        reader.Close();
        #
        #        filePath = dirIntegrationPath + @"\" + fileAux;
        #
        #        this.writeFile(filePath);
        #        downloadedProtocolfilesList.addEnd(filePath);
        #        info(strfmt("Download efetuado %1", filePath));
        #
        #    }
        #}
      ENDSOURCE
      SOURCE #init
        #private void init()
        #{
        #    files                       = new list(Types::String);
        #    downloadedProtocolfilesList = new list(Types::String);
        #}
      ENDSOURCE
      SOURCE #performDownload
        #public List performDownload()
        #{;
        #    this.init();
        #    if(validated || this.validate())
        #    {
        #        try
        #        {
        #            new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #            this.readFtpDir();
        #            this.downloadFiles();
        #
        #            CodeAccessPermission::revertAssert();
        #        }
        #        catch
        #        {
        #            exception = ClrInterop::getLastException();
        #            while (exception)
        #            {
        #                error(exception.get_Message());
        #                exception = exception.get_InnerException();
        #            }
        #            CodeAccessPermission::revertAssert();
        #        }
        #    }
        #    return downloadedProtocolfilesList;
        #}
      ENDSOURCE
      SOURCE #readFtpDir
        #private void readFtpDir()
        #{
        #    Listiterator iterator;
        #    container packedList;
        #    ;
        #    this.createListRequest();
        #    this.setCredentials();
        #
        #    request.set_Method("NLST");
        #    response = request.GetResponse();
        #    reader = new System.IO.StreamReader(response.GetResponseStream());
        #
        #    line = reader.ReadLine();
        #
        #    while (!System.String::IsNullOrEmpty(line))
        #    {
        #
        #        iterator = new Listiterator(strsplit(line,'/'));
        #
        #        while (iterator.more())
        #        {
        #            packedList += iterator.value();
        #            iterator.next();
        #        }
        #
        #        fileAux = conpeek(packedList, conlen(packedList));
        #
        #        files.addEnd(fileAux);
        #        line = reader.ReadLine();
        #    }
        #    reader.Close();
        #}
      ENDSOURCE
      SOURCE #setCredentials
        #private void setCredentials()
        #{
        #    ;
        #    credential = new System.Net.NetworkCredential(user, pwd);
        #    request.set_Credentials(credential);
        #}
      ENDSOURCE
      SOURCE #setDirIntegrationPath
        #public void setDirIntegrationPath(Str _dirIntegrationPath)
        #{;
        #    dirIntegrationPath = _dirIntegrationPath;
        #}
        #
      ENDSOURCE
      SOURCE #setFtpAddress
        #public void setFtpAddress(Str _ftpAddress)
        #{;
        #    ftpAddress = _ftpAddress;
        #}
        #
      ENDSOURCE
      SOURCE #setPwd
        #void setPwd(str _pwd)
        #{;
        #    pwd = _pwd;
        #}
      ENDSOURCE
      SOURCE #setUser
        #public void setUser(Str _user)
        #{;
        #    user = _user;
        #}
        #
      ENDSOURCE
      SOURCE #setFtpAddress
        #public void setFtpAddress(Str _ftpAddress)
        #{;
        #    ftpAddress = _ftpAddress;
        #}
        #
      ENDSOURCE
      SOURCE #setPwd
        #void setPwd(str _pwd)
        #{;
        #    pwd = _pwd;
        #}
      ENDSOURCE
      SOURCE #setUser
        #public void setUser(Str _user)
        #{;
        #    user = _user;
        #}
        #
      ENDSOURCE
      SOURCE #validate
        #public boolean validate()
        #{
        #    boolean ret = true;
        #    ;
        #
        #    if(!ftpAddress  || !dirIntegrationPath)
        #    {
        #        checkFailed("Falta de parâmetros");
        #        ret = false;
        #    }
        #
        #    validated = ret;
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #writeFile
        #private void writeFile(str _filePath)
        #{
        #    writer = new System.IO.StreamWriter(_filePath);
        #    writer.Write(line);
        #    writer.Flush();
        #    writer.Close();
        #}
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: CLS

; Microsoft Dynamics AX Class: FTPSender descarregado
; --------------------------------------------------------------------------------
  CLSVERSION 1
  
  CLASS #FTPSender
    Id 34460
    PROPERTIES
      Name                #FTPSender
      Extends             #
      RunOn               #Called from
    ENDPROPERTIES
    
    METHODS
      Version: 3
      SOURCE #classDeclaration
        #//I9
        #//ADC101
        #public class FTPSender
        #{
        #    object                                  ftpo;
        #    object                                  ftpResponse;
        #    System.Net.FtpWebRequest                request;
        #    System.IO.StreamReader                  reader;
        #    System.IO.Stream                        requestStream;
        #    System.Byte[]                           bytes;
        #    System.Net.NetworkCredential            credential;
        #    System.String                           xmlContent;
        #    System.Text.Encoding                    utf8;
        #
        #    System.Net.FtpWebResponse               response;
        #
        #    FilePath                                pathLocal;
        #    FilePath                                pathRemote;
        #    Boolean                                 validated;
        #
        #    str                                     ftpAddress;
        #    str                                     user;
        #    str                                     pwd;
        #    str                                     uploadCmd;
        #
        #}
      ENDSOURCE
      SOURCE #createWebRequest
        #private void createWebRequest()
        #{
        #    str uriAux;
        #    ;
        #
        #    uriAux = strfmt("ftp://%1/%2",ftpAddress, pathRemote);
        #    ftpo = System.Net.WebRequest::Create(uriAux);
        #    request = ftpo;
        #}
      ENDSOURCE
      SOURCE #performUpload
        #public void performUpload()
        #{
        #    System.Exception        exception;
        #    ;
        #
        #    try
        #    {
        #        if(validated || this.validate())
        #        {
        #            new InteropPermission(InteropKind::ClrInterop).assert();
        #
        #            this.readFile();
        #            this.createWebRequest();
        #            this.setCredentials();
        #            this.prepareContent();
        #
        #            CodeAccessPermission::revertAssert();
        #
        #            Info(strfmt("@ADC852",pathLocal));
        #        }
        #    }
        #    catch
        #    {
        #        exception = ClrInterop::getLastException();
        #        while (exception)
        #        {
        #            error(exception.get_Message());
        #            exception = exception.get_InnerException();
        #        }
        #        CodeAccessPermission::revertAssert();
        #    }
        #}
        #
      ENDSOURCE
      SOURCE #prepareContent
        #private void prepareContent()
        #{
        #    ;
        #    request.set_ContentLength(bytes.get_Length());
        #
        #    request.set_Method("STOR");
        #
        #    request.set_UseBinary(true);
        #
        #    requestStream = request.GetRequestStream();
        #    requestStream.Write(bytes,0,bytes.get_Length());
        #    requestStream.Close();
        #
        #}
      ENDSOURCE
      SOURCE #readFile
        #private void readFile()
        #{
        #    ;
        #
        #    reader = new System.IO.StreamReader(pathLocal);
        #    utf8 = System.Text.Encoding::get_UTF8();
        #    bytes = utf8.GetBytes( reader.ReadToEnd() );
        #
        #    reader.Close();
        #}
      ENDSOURCE
      SOURCE #setCredentials
        #private void setCredentials()
        #{
        #    ;
        #    credential = new System.Net.NetworkCredential(user, pwd);
        #    request.set_Credentials(credential);
        #}
      ENDSOURCE
      SOURCE #setPath
        #public void setPath(FilePath _path)
        #{
        #    ;
        #    pathLocal = _path;
        #    validated = false;
        #}
      ENDSOURCE
      SOURCE #setPathRemote
        #public void setPathRemote(FilePath _path)
        #{
        #    ;
        #    pathRemote = _path;
        #    validated = false;
        #}
      ENDSOURCE
      SOURCE #upload
        #private void upload()
        #{
        #    ;
        #    ftpResponse = request.GetResponse();
        #    response = ftpResponse;
        #}
      ENDSOURCE
      SOURCE #validate
        #public boolean validate()
        #{
        #    boolean ret = true;
        #    ;
        #    if(!pathLocal)              checkFailed("@ADC480");
        #    if(!pathRemote)             checkFailed("@ADC480");
        #
        #
        #    validated = ret;
        #
        #    return ret;
        #}
      ENDSOURCE
      SOURCE #setFtpAddress
        #public void setFtpAddress(Str _ftpAddress)
        #{;
        #    ftpAddress = _ftpAddress;
        #}
        #
      ENDSOURCE
      SOURCE #setPwd
        #void setPwd(str _pwd)
        #{;
        #    pwd = _pwd;
        #}
      ENDSOURCE
      SOURCE #setUser
        #public void setUser(Str _user)
        #{;
        #    user = _user;
        #}
        #
      ENDSOURCE
    ENDMETHODS
  ENDCLASS

***Element: JOB

; Microsoft Dynamics AX Job: FTPTest descarregado
; --------------------------------------------------------------------------------
  JOBVERSION 1
  
  SOURCE #FTPTest
    #static void FTPTest(Args _args)
    #{
    #    FTPReceiver ftpReceiver;
    #    FTPSender   ftpSender;
    #
    #    List        listDown;
    #    ;
    #
    #    //Receiver
    #    ftpReceiver = new FtpReceiver();
    #
    #    ftpReceiver.setFtpAddress("ftp.microsoft.com/MISC/FDC/");
    #    ftpReceiver.setUser("");
    #    ftpReceiver.setPwd("");
    #    ftpReceiver.setDirIntegrationPath(@"C:\path\");
    #
    #    if(ftpReceiver.validate())
    #    {
    #        listDown = ftpReceiver.performDownload();
    #    }
    #
    #    //Sender
    #    ftpSender = new FtpSender();
    #
    #    ftpSender.setFtpAddress("microsoft.com");
    #    ftpSender.setUser("");
    #    ftpSender.setPwd("");
    #    ftpSender.setPath(@"C:\path\oi.txt");
    #    ftpSender.setPathRemote("MISC/FDC/");
    #
    #    if(ftpSender.validate())
    #    {
    #        ftpSender.performUpload();
    #    }
    #}
    #
  ENDSOURCE

***Element: PRN

; Microsoft Dynamics AX Project : FTP unloaded
; --------------------------------------------------------------------------------
  PROJECTVERSION 2
  
  PROJECT #FTP
   PRIVATE
  PROPERTIES
    Name                #FTP
  ENDPROPERTIES
  
    PROJECTCLASS ProjectNode
    GROUP #Classes
      PROPERTIES
        Name                #Classes
        ProjectGroupType    #Classes
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 34459
        NODETYPE 329
        NAME #FTPReceiver
      ENDNODE
      BEGINNODE
        FILETYPE 0
        UTILTYPE 45
        UTILOBJECTID 34460
        NODETYPE 329
        NAME #FTPSender
      ENDNODE
      ENDGROUP
      
    GROUP #Jobs
      PROPERTIES
        Name                #Jobs
        ProjectGroupType    #Jobs
        GroupMask           #
        PreventEditProperties #No
      ENDPROPERTIES
      
      BEGINNODE
        FILETYPE 0
        UTILTYPE 5
        UTILOBJECTID 0
        NODETYPE 215
        NAME #FTPTest
      ENDNODE
      ENDGROUP
      
  ENDPROJECT
  

***Element: END
